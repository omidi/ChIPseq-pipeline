<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<component>
    <name>ShuffleAlignments</name>
    <!--<version>1.0</version>-->
    <doc>
    This component shuffles alignments to get background peaks for specificity sensitivity analysis.
    One can chose between two scripts: default is Phil's one because it's faster.
    Both conserve conservation patterns, i.e. they shuffle columns of the alignments and they replace one colum with another that has the same conservation pattern.
    Nucleotide compositions of regions are not conserved (e.g. GC content).
    </doc>
    <launcher type="python">
        <argument name="file" value="ShuffleAlignments.py" />
    </launcher>
    <requires>URL="http://www.python.org/not" type="manual">python</requires>
    <inputs>
        <input name="infile" type="BinaryFile">
            <doc>Alignments to shuffle. Typically half of alignments (from Splitalignments) used to predict sites on.</doc>
        </input>
    </inputs>
    <outputs>
        <output name="outfile" type="BinaryFile">
            <doc>Shuffled alignments, output file.</doc>
        </output>
    </outputs>
    <parameters>
        <parameter name="mode" type="string" default="phil">
            <doc>Whether to use Phil's or Silvia's shuffling programs. Phil's one is default because it's faster and easier to use.</doc>
        </parameter>
        <parameter name="iterations" type="int" default="5">
            <doc>How often the alignments should be shuffled. Each of these shufflings get concatenated in the end to one output file.</doc>
        </parameter>
        <parameter name="perlPATH" type="string" default="perl">
            <doc>Path to the perl to use.</doc>
        </parameter>
        <parameter name="pythonPATH" type="string" default="python">
            <doc>Path to the python to use.</doc>
        </parameter>
    </parameters>
 </component>
