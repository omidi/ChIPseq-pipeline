<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<component>
    <name>RecomputeZscores</name>
    <!--<version>1.0</version>-->
    <doc>
    This component recomputes the Z-score for refined peaks (after mixture modeling).
    For each fitted peak, the number of reads inside the peak gets recalculated over the integral of the estimated Gaussian.
    The number of reads then inside the peak + the 500bp (or FG windowsize) around the peak (the uniform distribution of the mixture model) is the foreground read count. The uniform distribution from the 500bp window is used because the noise distribution was fitted for 500/2000 bp windows.
    The background read count is the same as used for computing Z-scores of windows before.
    If no background sample was given, again a unfirom background distribution is assumed that is N/L, where N is total foreground count and L number of windows.
    </doc>
    <author email="severin.berger@stud.unibas.ch">Severin</author>
    <launcher type="python">
        <argument name="file" value="RecomputeZscores.py" />
    </launcher>
    <requires>URL="http://www.python.org/not" type="manual">python</requires>
    <inputs>
        <input name="peakfile" type="BinaryFile">
            <doc>Output file of SelectPeaksMM (allpeaks).</doc>
        </input>
        <input name="peakstats" type="BinaryFile">
            <doc>Output file of SelectPeaksMM (peakstats).</doc>
        </input>
        <input name="binned_reads" type="BinaryFile">
            <doc>Outfile of BinReads or BGFilter.</doc>
        </input>
        <input name="fit_log" type="BinaryFile">
            <doc>Log file of PeakCall_newNoiseModel, to get sigma and mu from.</doc>
        </input>
        <input name="Z_cutoff_file" type="BinaryFile">
            <doc>A file containing the Z-score (from PeakMerger). Only used when Z_cutoff parameter is negative</doc>
        </input>
    </inputs>
    <outputs>
        <output name="allpeaks" type="BinaryFile">
            <doc>Output file that looks like the input peakfile, but height is replaced by Z-score. And only peaks that make Z-cut-off are printed.</doc>
        </output>
        <output name="outfile" type="BinaryFile">
            <doc>Like allpeaks, but only top topPeaks peaks (by Z-score) are printed.</doc>
        </output>
        <output name="peakstats" type="BinaryFile">
            <doc>Output file that looks like the input peakstats, but additionally contains a column with Z-scores. ONLY stats of peaks that made Z-score cut-off are printed!</doc>
        </output>
        <output name="log_file" type="BinaryFile">
            <doc></doc>
        </output>
        <output name="height_z_scatter" type="PDF">
            <doc>scatter plot of peakheight versus peak Z-scores.</doc>
        </output>
        <output name="z_hist" type="PDF">
            <doc>Histogram of Z-scores.</doc>
        </output>
        <output name="z_revcum" type="PDF">
            <doc>Reverse cumulative distribution of peak Z-scores.</doc>
        </output>
    </outputs>
    <parameters>
        <parameter name="read_files" type="string" default="">
            <doc>Used to find the fragment length log_file. Fragment length is used to find reasonable cut-offs on peak lengths.</doc>
        </parameter>
        <parameter name="FGwinsize" type="int" default="500">
            <doc>The same as used for BinReads</doc>
        </parameter>
        <parameter name="Z_cutoff" type="float" default="-1">
            <doc></doc>
        </parameter>
        <parameter name="topPeaks" type="int" default="1000">
            <doc></doc>
        </parameter>
    </parameters>
</component>
